import static org.gradle.jvm.toolchain.JavaLanguageVersion.of
import static org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_11
import static org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9

plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'java-library'
}

allprojects {
    pluginManager.withPlugin('java') {
        java {
            toolchain {
                languageVersion = of(javaVersion)

                // Configure Gradle to use IBM J9 JDK toolchain.
                // (You will need to install J9 manually first.)
                //vendor = JvmVendorSpec.IBM
                //implementation = JvmImplementation.J9

                // Configure Gradle to use Azul JDK toolchain.
                //vendor = JvmVendorSpec.AZUL
            }
        }
    }

    pluginManager.withPlugin('org.jetbrains.kotlin.jvm') {
        tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
            compilerOptions {
                languageVersion = KOTLIN_1_9
                apiVersion = KOTLIN_1_9
                jvmTarget = JVM_11
                allWarningsAsErrors = true
                freeCompilerArgs.addAll([
                    '-Xjvm-default=all'
                ])
            }
        }
    }
}

configurations {
    testingLibraries {
        canBeConsumed = false
    }
}

dependencies {
    api "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.slf4j:slf4j-api:$slf4j_version"

    testImplementation "org.assertj:assertj-core:$assertj_version"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_jupiter_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_jupiter_version"
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    testRuntimeOnly "org.apache.logging.log4j:log4j-slf4j2-impl:$log4j_version"
    testRuntimeOnly "org.apache.logging.log4j:log4j-core:$log4j_version"

    testingLibraries "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    testingLibraries "org.slf4j:slf4j-simple:$slf4j_version"
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()

    javaLauncher = javaToolchains.launcherFor {
        languageVersion = of(testJavaVersion)
    }

    doFirst {
        // Prevent the project from creating temporary files outside of the build directory.
        systemProperty 'java.io.tmpdir', buildDir.absolutePath
        systemProperty 'java.security.manager', 'allow'

        systemProperty 'java.security.policy', file('permissive.policy').toURI().toURL()
        systemProperty 'test.gradle.user.home', gradle.gradleUserHomeDir.toURI().path
        systemProperty 'test.gradle.home', gradle.gradleHomeDir.toURI().path
        systemProperty 'test.project.dir', projectDir.toURI().path
        systemProperty 'testing-libraries.path', configurations.testingLibraries.asPath

        systemProperty 'org.slf4j.simpleLogger.defaultLogLevel', 'info'
        systemProperty 'org.slf4j.simpleLogger.dateTimeFormat', 'yyyy-MM-dd HH:mm:ss:SSS Z'
        systemProperty 'org.slf4j.simpleLogger.showDateTime', true
        systemProperty 'org.slf4j.simpleLogger.showShortLogName', true
        systemProperty 'org.slf4j.simpleLogger.showThreadName', false
    }
}

wrapper {
    gradleVersion = '8.4'
}
